{
  "#!": {
    "prefix": "#!",
    "isFileTemplate": true,
    "body": [
      "#!/usr/bin/env -S ${1|zsh,bash,sh,node,python,make -f|}$0"
    ],
    "description": "Scripting file header"
  },
  "meta.h1": {
    "prefix": "meta.h1",
    "body": [
      "${LINE_COMMENT}$2---------------------------------------------------------------------${1:${TM_SELECTED_TEXT}}",
      "$0"
    ],
    "description": "Insert a H1 comment header"
  },
  "meta.h2": {
    "prefix": "meta.h2",
    "body": [
      "",
      "${LINE_COMMENT} ${1:${TM_SELECTED_TEXT}}",
      "${LINE_COMMENT}-------------------------------------",
      "$0"
    ],
    "description": "Insert a H2 comment header"
  },
  "meta.p.guillemets": {
    "prefix": "meta.p.guillemets",
    "description": "Insert a chevrons (guillemets)",
    "body": [
      "«${1:${TM_SELECTED_TEXT}}»"
    ]
  },
  "meta.modified": {
    "prefix": "meta.lm",
    "body": [
      "${LINE_COMMENT} Last-Modified : ${CURRENT_MONTH_NAME} ${CURRENT_DATE}, ${CURRENT_YEAR}"
    ],
    "description": "Last-modified entry for meta.header"
  },
  "meta.header": {
    "prefix": "meta.head",
    "body": [
      "${LINE_COMMENT} Summary.....: ${0}${2:TODO: [${CURRENT_MONTH_NAME} ${CURRENT_DATE}, ${CURRENT_YEAR}] Add summary.}",
      "${LINE_COMMENT} Created-at..: ${3:${CURRENT_MONTH_NAME} ${CURRENT_DATE}, ${CURRENT_YEAR} }",
      "${LINE_COMMENT} Authors.....: Alex A. Davronov <al.neodim@gmail.com> (${CURRENT_YEAR}-)",
      "${LINE_COMMENT} Repository..: ${4|N/A,https://github.com/,https://gitlab.com/,https://bitbucket.org/|}",
      "${LINE_COMMENT} Description.: ${6:TODO: [${CURRENT_MONTH_NAME} ${CURRENT_DATE}, ${CURRENT_YEAR}] Add description.}",
      "${LINE_COMMENT} Usage.......: ${7:TODO: [${CURRENT_MONTH_NAME} ${CURRENT_DATE}, ${CURRENT_YEAR}] Add usage.}"
    ],
    "description": "Insert documents' header (versin, desc, license, usage)"
  },
  "meta.ending.quote": {
    "prefix": "meta.quote",
    "body": [
      "${LINE_COMMENT} ${1|From the End comes The Beginning! - Seneca,Something ends\\, something begins! - Anonymous,Good luck\\, and happy coding!,Ars longa\\, vita brevis! - Hippocrates  of Kos,I prefer nothing\\, unless it is true! - Socrates\\, Phaedrus,The disgrace begins when a man writes not well\\, but badly. - Socrates\\, Phaedrus,I've wrote things you people wouldn't believe...,I've coded things\\, you people\\, wouldn't believe!,Less is more - Chilon of Sparta,Practice geometry!- Hippocrates of Chios,Jack of all trades\\, master of none!,There is a good principle which created order\\, light\\, and man\\, and an evil principle which created chaos\\, darkness\\, and woman. —Pythagoras of Samos,A computer can never be held accountable\\, therefore a computer must never make a management decision. — IBM 1979,The lyf so short\\, the craft so long to lerne. - Chaucer|}$2"
    ],
    "description": "Lovely quote!"
  },
  "meta.ending.quote2": {
    "prefix": "meta.quote2",
    "body": [
      "${LINE_COMMENT} Life is short, skill requires time; the time is running; experimentations perilous,",
      "${LINE_COMMENT} and decisions are difficult. - Hippocrates of Kos, Aphorisms"
    ],
    "description": "Introductory Aphorism by Hippocrates"
  },
  "meta.date": {
    "prefix": "meta.date",
    "body": [
      "${CURRENT_MONTH_NAME} ${CURRENT_DATE}, ${CURRENT_YEAR}"
    ],
    "description": "system date"
  },
  "meta.workflow.continue": {
    "description": "Put a CONTINUE: comment on where to continue next day",
    "prefix": "meta.continue",
    "body": [
      "$LINE_COMMENT CONTINUE: (${CURRENT_MONTH_NAME} ${CURRENT_DATE}, ${CURRENT_YEAR}) ${1}"
    ]
  },
  "meta.doc.flow": {
    "prefix": "meta.doc.flow",
    "body": [
      "(${INPUT}) ➝ (${OUTPUT}) ➝ (${0:END})"
    ],
    "description": "meta.flow"
  },
  "meta.hypersnippets.flags": {
    "prefix": "hsnip.flags",
    "scope": "hsnips",
    "description": "Flags for the snippet",
    "body": "${1|w,A,i,b,M|}"
  },
  "meta.hypersnippets.help": {
    "prefix": "hsnip.help",
    "scope": "hsnips",
    "description": "Help for defintion",
    "body": [
      "# Full documentations: https://github.com/draivin/hsnips",
      "# TODO: wRITe on global snippet: https://github.com/draivin/hsnips#snippets-file",
      "#---------------------------------------------------------------------------Help",
      "# Snippet FLAGS:",
      "# A - Expand upon match, don't wait for [TAB]",
      "# i - Expand in the middle of the prefix",
      "# w - Expand if the prefix has a punctuation chars: comms, dots etc.",
      "# b - Expand if only the prefix is the only word on the line",
      "#     (dubious?, non-regexp snips)",
      "# M - Expands if snippet regexp matches multiple lines",
      "#-------------------------------------------------------------------------------",
      "# VARIABLES that can be used inside",
      "# rv   - Output string",
      "# t    - Array of strings on tabstops",
      "# W    - Currently opened workspace URI",
      "# path - Document",
      "# ",
      "$0"
    ]
  },
  "meta.hyperscrippets.new": {
    "prefix": "hsnip.new",
    "scope": "hsnips",
    "description": "New hypersnippet SNIPPET defintion",
    "body": [
      "#---------------------------------------------------------------------${2}-${1}",
      "${3:context fn(context)}",
      "snippet ${4|prefix,`regexp`|} \"${5:description}\" ${6:hsnip.flags}",
      "\t$0",
      "endsnippet"
    ]
  },
  "meta.todo": {
    "prefix": "todo",
    "description": "Insert user-defined todo commentt",
    "body": [
      "${1|CONTINUE,TODO,BUG,DEBUG,PERF,REVIEW,IMPL,DPRCT,REMOVE,NOTE|}: ${3:[${4:$CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR}]} ${2:Description}"
    ]
  },
  "meta.textmate.placeholder.transform": {
    "prefix": "textmate.ph.transform",
    "body": [
      "\\${${1:1}/${3:(.*)}/\\${1:/${2|upcase,downcase,capitalize,camelcase,pascalcase|}}/}$0"
    ],
    "description": "TextMate placeholder transform"
  },
  "meta.textmate.placeholder.boolean": {
    "prefix": "textmate.ph.boolean",
    "body": [
      "${${1:1}|true,false|}"
    ],
    "description": "TextMate placeholder boolean"
  },
  "meta.textmate.vars.date": {
    "prefix": "textmate.vars.date",
    "body": [
      "\\${${1|CURRENT_YEAR,CURRENT_YEAR_SHORT,CURRENT_MONTH,CURRENT_DATE,CURRENT_HOUR,CURRENT_MINUTE,CURRENT_SECOND,CURRENT_DAY_NAME,CURRENT_DAY_NAME_SHORT,CURRENT_MONTH_NAME,CURRENT_MONTH_NAME_SHORT,CURRENT_SECONDS_UNIX|}}"
    ],
    "description": "TextMate placeholder boolean"
  },
  "meta.textmate.vars.misc": {
    "prefix": "textmate.vars.misc",
    "body": [
      "\\${${1|RANDOM,RANDOM_HEX,UUID|}}"
    ],
    "description": "TextMate placeholder boolean"
  },
  "meta.textmate.vars.editor": {
    "prefix": "textmate.vars.editor",
    "body": [
      "\\${${1|SELECTION,CLIPBOARD,TM_SELECTED_TEXT,TM_CURRENT_LINE,TM_CURRENT_WORD,TM_LINE_INDEX,TM_LINE_NUMBER,TM_FILENAME,TM_FILENAME_BASE,TM_DIRECTORY,TM_FILEPATH,RELATIVE_FILEPATH,CURSOR_INDEX,CURSOR_NUMBER|}}"
    ],
    "description": "TextMate placeholder boolean"
  },

  "meta.semver.regex": {
    "prefix": "meta.semver.regex",
    "body": [
      "^([1-9][0-9]*)\\\\.([1-9][0-9]*)\\\\.([1-9][0-9]*)(-(([0-9][0-9]|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\\\\.([0-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\\\\+([0-9a-zA-Z-]+(\\\\.[0-9a-zA-Z-]+)*))?$"
    ],
    "description": "meta.semver.regex"
  },
  "vim modeline": {
    "prefix": "ex",
    "body": [
      "${1|//,#,--|} ex: ft=${2|zsh,bash,lua,js,ts|}"
    ],
    "description": "vim modeline"
  },
  "term.string.fg.rgb": {
    "prefix": "term.string.fg.rbg",
    "description": "ANSI RGB color code",
    "body": "\\x1B[;38;2;${1:R};${2:G};${3:B}m${4:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.fg.rgb.yellow": {
    "prefix": "term.string.fg.rbg.yellow",
    "description": "ANSI RGB color code",
    "body": "\\x1B[;38;2;255;200;0m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.fg.black": {
    "prefix": "term.string.fg.black",
    "body": "\\x1B[30m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.fg.red": {
    "prefix": "term.string.fg.red",
    "body": "\\x1B[31m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.fg.green": {
    "prefix": "term.string.fg.green",
    "body": "\\x1B[32m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.fg.brown": {
    "prefix": "term.string.fg.brown",
    "body": "\\x1B[33m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.fg.blue": {
    "prefix": "term.string.fg.blue",
    "body": "\\x1B[34m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.fg.magenta": {
    "prefix": "term.string.fg.magenta",
    "body": "\\x1B[35m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.fg.cyan": {
    "prefix": "term.string.fg.cyan",
    "body": "\\x1B[36m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.bg.rgb": {
    "prefix": "term.string.bg.rbg",
    "description": "ANSI RGB color code",
    "body": "\\x1B[;48;2;${1:R};${2:G};${3:B}m${4:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.bg.black": {
    "prefix": "term.string.bg.black",
    "body": "\\x1B[40m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.bg.red": {
    "prefix": "term.string.bg.red",
    "body": "\\x1B[41m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.bg.green": {
    "prefix": "term.string.bg.green",
    "body": "\\x1B[42m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.bg.brown": {
    "prefix": "term.string.bg.brown",
    "body": "\\x1B[43m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.bg.blue": {
    "prefix": "term.string.bg.blue",
    "body": "\\x1B[44m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.bg.magenta": {
    "prefix": "term.string.bg.magenta",
    "body": "\\x1B[45m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.bg.cyan": {
    "prefix": "term.string.bg.cyan",
    "body": "\\x1B[46m${1:${TM_SELECTED_TEXT}} \\x1B[0m$0"
  },
  "term.string.bold": {
    "prefix": "term.string.bold",
    "description": "Bold mode",
    "body": "\\x1B[1m${1:${TM_SELECTED_TEXT}} \\x1B[22m"
  },
  "term.string.dim": {
    "prefix": "term.string.dim",
    "description": "Dim/faint mode",
    "body": "\\x1B[2m${1:${TM_SELECTED_TEXT}} \\x1B[22m"
  },
  "term.string.italic": {
    "prefix": "term.string.italic",
    "description": "Italic mode",
    "body": "\\x1B[3m${1:${TM_SELECTED_TEXT}}\\x1B[23m"
  },
  "term.string.underline": {
    "prefix": "term.string.underline",
    "description": "Underline mode",
    "body": "\\x1B[4m${1:${TM_SELECTED_TEXT}}\\x1B[24m"
  },
  "term.string.inverse": {
    "prefix": "term.string.inverse",
    "description": "Inverse/reverse mode",
    "body": "\\x1B[7m${1:${TM_SELECTED_TEXT}}\\x1B[27m"
  },
  "term.string.hidden": {
    "prefix": "term.string.hidden",
    "description": "Hidden/invisible mode",
    "body": "\\x1B[8m${1:${TM_SELECTED_TEXT}}\\x1B[28m"
  },
  "term.string.strike": {
    "prefix": "term.string.strike",
    "description": "Strikethrough mode",
    "body": "\\x1B[9m${1:${TM_SELECTED_TEXT}}\\x1B[29m"
  }
}
{
  "esbuild.js.new": {
    "prefix": "esbuild.new",
    "scope": "javascript",
    "isFileTemplate": true,
    "body": [
      "#!/usr/bin/env -S node",
      "",
      "// Esbuild config file",
      "// esbuild",
      "import * as path     from \"node:path\"",
      "import * as fs       from \"node:fs\"",
      "import * as esbuild  from \"esbuild\"",
      "",
      "import * as alias    from \"esbuild-plugin-alias\"",
      "import {",
      "    performance as perf,",
      "} from \"node:perf_hooks\"",
      ",",
      "${5|import { Logger   } from \"./tools/esbuild-plugin-logger.mjs\",esbuild.plugin.logger|}",
      "${6|import { Metafile } from \"./tools/esbuild-plugin-metafile.mjs\",esbuild.plugin.metafile|}",
      "let buildConfig = ${7|esbuild.build.config|}",
      "let serveConfig = ${9:esbuild.serve.config}",
      "",
      "    console.log(`\\x1B[42;1mesbuild\\x1B[0;22m v\\${esbuild.version} is running`);",
      "    esbuild",
      "      .serve(",
      "        serveConfig,",
      "        buildConfig",
      "      )",
      "      .then((result) => {",
      "        console.log(`Esbuild server started at: ${result.host}:${server.port}}`);",
      "      }) ",
      "      .catch((err) => { console.error(err); process.exit(1); $0 })"
    ],
    "description": "esbuild.js.build.config"
  },
  "esbuild.js.build.config": {
    "prefix": "esbuild.build.config",
    "scope": "javascript",
    "body": [
      "{",
      "\ttarget         : [ ${1:\"es2020\",\"node16\",\"chrome58\",\"firefox57\",\"safari11}\" ],",
      "\tplatform       : \"${2|node,browser,neutral|}\",",
      "\tentryPoints    : { \"$4\": \"src/${4|index,extension|}.${3|ts,js,tsx,jsx|}\" },",
      "\tformat         : \"${5|esm,cjs,iife|}\", // module format of output",
      "\tbundle         : ${6|true,false|},",
      "\toutdir         : \"${7|build,dist|}\",",
      "\t// outfile     : \"${8:index.js}\",",
      "\t// write       : true // Emit files to fileSystem (true) or memory (false)",
      "\tentryNames     : \"[dir]/[hash]-[name]\",",
      "\tassetNames     : \"[dir]/[hash]-[name]\",",
      "\tassetNames     : \"[dir]/[hash]-[name]\",",
      "\tsourcemap      : true,",
      "\tmetafile       : true,",
      "\tincremental    : true,",
      "\twatch          : { onRebuild${10|: onRebuild,(err){ err && console.error(err); } },",
      "\tloader: {",
      "\t  \".png\" : \"dataurl\",",
      "\t  \".jpg\" : \"dataurl\",",
      "\t  \".jpeg\": \"dataurl\",",
      "\t  \".svg\" : \"file\",",
      "\t},",
      "\texternal       : [",
      "\t  // Skip these modules, do not bundle",
      "\t],",
      "\t",
      "\t// Misc",
      "\tdefine         : { DEBUG: false },",
      "\tbanner         : {",
      "\t  \"js\" : `// This file is generated automaticall by esbuild \\${esbuild.version}`,",
      "\t  \"css\": `// This file is generated automaticall by esbuild \\${esbuild.version}`",
      "\t},",
      "\tfooter         : {},",
      "\t${12:esbuild.build.config.jsx}",
      "\tplugins        : [ ${14:esbuild.plugin} ],",
      "}"
    ],
    "description": "esbuild.js.build.config"
  },
  "esbuild.js.serve.config": {
    "prefix": "esbuild.serve.config",
    "scope": "javascript",
    "body": [
      "{",
      "\tserveDir: path.resolve(process.cwd(),`${1|${buildConfig.outdir}/public,build/public/,dist/public/|}`),",
      "\t// host: ${2|127.0.0.1,0.0.0.0|},",
      "\tport: ${3:8000},",
      "\t// onRequest: ${4: (req) => {}}",
      "}"
    ],
    "description": "esbuild.js.serve.config"
  },
  "esbuild.js.build.config.jsx": {
    "prefix": "esbuild.build.config.jsx",
    "scope": "javascript,javascriptreact",
    "body": [
      "jsx            : \"${1|transform,preserver,automatic|}\",",
      "jsxDev         : false, // React specific, requires jsx:automatic",
      "jsxFactory     : \"${2|h,jsx|}\",",
      "jsxFragment    : \"Fragment\",",
      "jsxImportSource: \"${3|solid,react,preact,inferno|}\", // React specific, requires jsx:automatic",
      "jsxSideEffects : ${4|true,false|},",
      ""
    ],
    "description": "esbuild.js.build.config.jsx"
  },
  "esbuild.plugin.new": {
    "prefix": "esbuild.plugin.new",
    "scope": "javascript,javascriptreact",
    "body": [
      "{",
      "  name: `${1:myplugin}`,",
      "  setup(build) {",
      "      let options = build.initialOptions;",
      "          build.esbuild${10}",
      "  }",
      "}"
    ],
    "description": "esbuild.plugin"
  },
  "esbuild.plugin.logger": {
    "prefix": "esbuild.plugin.logger",
    "scope": "javascript,javascriptreact",
    "body": [
      "import { Metafile } from \"./esbuild-plugin-metafile.mjs\";",
      "import { Performance } from \"node:perf_hooks\";",
      "//--------------------------------------------------------esbuild-plugin-blogger",
      "/**",
      " * A logger plugin for ESbuild",
      " * @usage In your esbuild.js config:",
      " * ```js",
      " * import { performance } from \"node:perf_hooks\"",
      " * { pluings: [ new Logger(performance) ] }",
      " * ```",
      " * @extends Object",
      " */",
      "export class Logger extends Object {",
      "  /* Default constructor for esbuild metafile, may be overriden */",
      "  static Metafile = Metafile;",
      "  static Performance = Performance;",
      "",
      "  /**",
      "   * The only purpose of this class is to provide colorsed output",
      "   */",
      "  static Duration = class extends String {",
      "    static Math = Math;",
      "    constructor(number, options = {}) {",
      "      let string, stringANSI, numberCeil;",
      "",
      "      numberCeil = Logger.Duration.Math.ceil(number * 100) / 100;",
      "",
      "      stringANSI = \"⚡\\x1B[32mDone in \\x1B[0m\\x1B[33m\" + numberCeil + \"ms\\x1B[0m\";",
      "      string     = \"⚡ Done in \" + numberCeil + \"ms\";",
      "",
      "      options.colorMode = new Boolean(options.colorMode).valueOf();",
      "      if (!new Boolean(process.stdout.isTTY).valueOf()){",
      "        options.colorMode = false;",
      "      }",
      "",
      "      super(options.colorMode ? stringANSI : string);",
      "      this.value = number;",
      "    }",
      "  };",
      "",
      "  static MetafileFormatted = class extends Logger.Metafile {",
      "    static Map = Map;",
      "",
      "    constructor(metaFile, options = {}) {",
      "      super(metaFile);",
      "      this.options = options || {};",
      "      this.options.nameLenMax = options.nameLenMax || 50;",
      "      options.colorMode && (this.options.colorMode = true);",
      "",
      "      // this.longsetFileName = this.getLongestFileName()",
      "      this.formattedString = this.format();",
      "    }",
      "",
      "    /**",
      "     * DPRCT: [November 05, 2022] Deprecate",
      "     * @returns",
      "     */",
      "    getLongestFileName() {",
      "      let names = [],",
      "        index,",
      "        fileName,",
      "        fileNameLongest = \"\";",
      "      names = names.concat(Object.getOwnPropertyNames(this.inputs));",
      "      names = names.concat(Object.getOwnPropertyNames(this.outputs));",
      "",
      "      for (let i = 0; i < names.length; i++) {",
      "        fileName = names[i];",
      "        if (fileNameLongest.length < fileName.length) {",
      "          fileNameLongest = fileName;",
      "        }",
      "      }",
      "      return fileNameLongest;",
      "    }",
      "",
      "    formatHeader(str) {",
      "      let string = str;",
      "      let stringANSI = \"\\x1B[31;1m\" + str + \"\\x1B[0m\";",
      "      return this.options.colorMode ? stringANSI : string;",
      "    }",
      "    formatEntry(prefix, entryName, bytesKb) {",
      "      let nlm = this.options.nameLenMax;",
      "      if (entryName.length > nlm) {",
      "        entryName = \"…\" + entryName.substr(-1 * nlm, nlm);",
      "      }",
      "      let iEntryName = entryName.padEnd(nlm + 10);",
      "      iEntryName = iEntryName;",
      "      bytesKb = bytesKb.toString().padStart(5);",
      "",
      "      let string = \"[\" + bytesKb + \"kb] \".padEnd(4) + prefix + iEntryName;",
      "      let stringANSI =",
      "        \"\\x1B[1;36m[\" + bytesKb + \"kb]\\x1B[0m \".padEnd(4) + prefix + iEntryName;",
      "",
      "      return this.options.colorMode ? stringANSI : string;",
      "    }",
      "",
      "    format() {",
      "      // This part finds path/foo.xxx.map  files generated by esbuild",
      "      let outputs,",
      "        inputs,",
      "        meta = this,",
      "        isMap;",
      "      outputs = Object.values(meta.outputs);",
      "      inputs = new this.constructor.Map();",
      "      isMap = /(.*)\\.map$/g;",
      "      for (let i = 0; i < outputs.length; i++) {",
      "        const record = outputs[i];",
      "        let entryName = record.entryPoint;",
      "        let sourceMap = isMap.exec(record.name);",
      "",
      "        // Move source maps to correspoding entries",
      "        if (entryName == null && sourceMap) {",
      "          entryName = meta.outputs[sourceMap[1]].entryPoint;",
      "        }",
      "",
      "        if (!inputs.has(entryName)) {",
      "          inputs.set(entryName, []);",
      "        }",
      "",
      "        if (inputs.has(entryName)) {",
      "          inputs.get(entryName).push(record);",
      "        }",
      "      }",
      "      // Conver the Metafile to tree-like array-structure",
      "      //  tree = [",
      "      //     \"entry\", [",
      "      //         [ \"entry\" ]",
      "      //         [ \"entry\" , [",
      "      //             \"entry\"",
      "      //           ]",
      "      //         ]",
      "      //     ]",
      "      //  ]",
      "      // IMPL: [November 05, 2022] Replace logs by tty in watch mode",
      "      let formattedString = \"\";",
      "      inputs.forEach((outputs, entryName, i) => {",
      "        formattedString += this.formatEntry(",
      "          \" ➜ \",",
      "          this.formatHeader(entryName),",
      "          meta.inputs[entryName].bytesKb",
      "        );",
      "        formattedString += \"\\n\";",
      "        for (let i = 0; i < outputs.length; i++) {",
      "          let outputEntry = outputs[i];",
      "          // continue",
      "          formattedString += this.formatEntry(",
      "            \"  ⮡ \",",
      "            outputEntry.name,",
      "            outputEntry.bytesKb",
      "          );",
      "          formattedString += \"\\n\";",
      "        }",
      "      });",
      "      return formattedString;",
      "    }",
      "",
      "    toString() {",
      "      return this.formattedString;",
      "    }",
      "  };",
      "",
      "  /**",
      "   * Peformance object is required to report on performance.",
      "   * colorMode is set to true to colorsize output.",
      "   * @param {import(\"node:perf_hooks\").Performance|undefined} performance",
      "   * @param {Object}  options",
      "   * @param {boolean} options.colorMode",
      "   * @param {string}  options.description",
      "   * @returns {Logger}",
      "   */",
      "  constructor(performance, console, options = {}) {",
      "    super();",
      "    this.performance = performance;",
      "    this.options = options || {};",
      "    this.name = options.name || \"esbuild-plugin-logger\";",
      "    this.console = console || globalThis.console;",
      "    options.colorMode && (this.options.colorMode = true);",
      "    options.description &&",
      "      (this.options.description = new String(options.description));",
      "    options.nameLenMax && (this.options.nameLenMax = options.nameLenMax);",
      "",
      "    if (new Object(performance).constructor !== this.constructor.Performance) {",
      "      throw new TypeError(",
      "        this.name + \": invalid 2 argument - performance is misssing\"",
      "      );",
      "    }",
      "    // If stdout is connected to TTY, then",
      "    if (new Boolean(process.stdout.isTTY).valueOf()) {",
      "      this.options.nameLenMax = process.stdout.columns - 30;",
      "    } else {",
      "      this.options.colorMode = false;",
      "    }",
      "    // Dumb esbuild assings `setup()` to something else...",
      "    // and `this` becomes undefined",
      "    return {",
      "      name: this.name,",
      "      setup: this.setup.bind(this),",
      "    };",
      "  } // DEFAULT CONSTRUCTOR END",
      "",
      "  //---------------------------------------------------------------------setup",
      "  /* Esbuild specific plugin data structure */",
      "  name;",
      "  setup(pluginBuild) {",
      "    pluginBuild.onStart(this.onStart.bind(this, pluginBuild.initialOptions));",
      "    pluginBuild.onEnd(this.onEnd.bind(this, pluginBuild.initialOptions));",
      "  }",
      "",
      "  onStart(BuildOptions, result) {",
      "    this.performance.clearMarks(\"esbuild-start\" + this.name);",
      "    this.performance.clearMarks(\"esbuild-end\" + this.name);",
      "    this.performance.clearMeasures(\"esbuild\" + this.name);",
      "    this.performance.mark(\"esbuild-start\" + this.name);",
      "  }",
      "",
      "  onEnd(BuildOptions, result) {",
      "    // Tweak colored output",
      "    if (BuildOptions.watch) {",
      "      console.clear();",
      "      let date = new Date().toLocaleTimeString();",
      "      if (this.options.colorMode) {",
      "        this.console.log(\"\\x1B[;38;2;255;200;0m⚠ Screen was cleared! : \"+date+\" \\x1B[0m\");",
      "      } else {",
      "        this.console.log(\"⚠ Screen was cleared!\");",
      "      }",
      "      this.options.nameLenMax = process.stdout.columns - 30;",
      "    }",
      "    if (this.options.colorMode) {",
      "      this.console.log(",
      "        ` \\x1B[42;1mesbuild\\x1B[0;22m \\x1B[1mv${esbuild.version} \\x1B[0m`",
      "      );",
      "    } else {",
      "      this.console.log(` esbuild v${esbuild.version}`);",
      "    }",
      "",
      "    if (result.errors && result.errors.length) {",
      "      return;",
      "    }",
      "    // Report entries of the metafile",
      "",
      "    // Remap metafile structure a bit",
      "    // meta      = new this.constructor.Metafile(result.metafile);",
      "    let meta = new this.constructor.MetafileFormatted(",
      "      result.metafile,",
      "      this.options",
      "    );",
      "    this.console.log(meta.toString());",
      "",
      "    // Measure and report performance",
      "    let perf, measurement, duration;",
      "",
      "    perf = this.performance;",
      "    perf.mark(\"esbuild-end\" + this.name);",
      "    measurement = perf.measure(",
      "      \"esbuild\" + this.name,",
      "      \"esbuild-start\" + this.name,",
      "      \"esbuild-end\" + this.name",
      "    );",
      "    duration = new this.constructor.Duration(",
      "      measurement.duration,",
      "      this.options",
      "    );",
      "    this.console.log(duration.toString());",
      "  }",
      "}"
    ],
    "description": "esbuild.plugin.logger"
  },
  "esbuild.plugin.metafile": {
    "prefix": "esbuild.plugin.metafile",
    "scope": "javascript,javascriptreact",
    "body": [
      "import * as path from \"node:path\"",
      "import * as fs   from \"node:fs\"",
      "//-------------------------------------------------------esbuild-plugin-metafile",
      "/**",
      " * A esbuild plugin that slightly tweak metafile.",
      " * it also provides a `Metafile.Save` class which is also a plugin",
      " * used to save metaf file `esbuild.meta.json`",
      " * to a specified path. Dont' forget to update",
      " * your esbuild `{ sourcemap: true }` config",
      " * @usage `{ ... , plugins: [ new Meta.Save() ]`",
      " */",
      "export class Metafile extends Object {",
      "  static Object = Object;",
      "  static Math = Math;",
      "  ",
      "  static Save = class extends Object {",
      "    static Metafile = Metafile;",
      "    static path = path;",
      "    static fs   = fs;",
      "    /**",
      "     * @param {string?} - <path> is relative to esBuildOptions.outdir",
      "     */",
      "    constructor(path = \"\") {",
      "      super();",
      "      Object.defineProperty(this, \"path\", {",
      "        enumerable: false,",
      "        value: path + \"esbuild.meta.json\",",
      "      });",
      "",
      "      // Dumb esbuild assings setup to something else...",
      "      // and this becomes undefined",
      "      return {",
      "        name: this.name,",
      "        setup: this.setup.bind(this),",
      "      };",
      "    }",
      "",
      "    name = \"esbuild-plugin-metafile-save\";",
      "    //-------------------------------------------------------------------setup",
      "    setup(pluginBuild) {",
      "      pluginBuild.onEnd(",
      "        function (BuildOptions, result){",
      "          if (result.errors && result.errors.length) {",
      "            return",
      "          }",
      "",
      "          let outpath, meta, sysfs, syspath;",
      "          syspath = this.constructor.path;",
      "          sysfs   = this.constructor.fs;",
      "",
      "          meta    = new this.constructor.Metafile(result.metafile);",
      "          outpath = syspath.join(BuildOptions.outdir, this.path);",
      "                    sysfs.writeFileSync(outpath, meta.toString());",
      "        }.bind(this, pluginBuild.initialOptions)",
      "      );",
      "    }",
      "  };",
      "",
      "  /**",
      "   * Takes a esbuild metafile",
      "   * @param {import(\"esbuild\").Metafile} metFile - esbuild metafile",
      "   */",
      "  constructor(metFile) {",
      "    super();",
      "    Object.assign(this, new Object(metFile));",
      "",
      "    this.extendMaps(this.inputs);",
      "    this.extendMaps(this.outputs);",
      "  } // DEFAULT CONSTRUCTOR END",
      "",
      "  extendMaps(map) {",
      "    let fields = this.constructor.Object.getOwnPropertyNames(map);",
      "    if (map[fields[0]].bytesKb != null) {",
      "      return map;",
      "    }",
      "    for (let i = 0; i < fields.length; i++) {",
      "      const fileName = fields[i];",
      "      map[fileName] = this.extendMap(map[fileName], fileName);",
      "",
      "      if (map[fileName].inputs) {",
      "        this.extendMap.call(this, map[fileName].inputs);",
      "      }",
      "    }",
      "    return map;",
      "  }",
      "  //------------------------------------------------------------------extendMap",
      "  // input: mapRecords = { \"name.js\": { bytes: ... }  }",
      "  // output: mapRecords = { \"name.js\": { bytes: ..., bytesKb }  }",
      "  extendMap(mapRecord, name, sizeKb) {",
      "    mapRecord.name = name;",
      "    // Convert bytes to kBytes",
      "    if (mapRecord.bytes >= 0) {",
      "      sizeKb = mapRecord.bytes / 1024;",
      "      sizeKb = this.constructor.Math.ceil(sizeKb * 10) / 10;",
      "      mapRecord.bytesKb = sizeKb;",
      "    }",
      "",
      "    if (mapRecord.bytesInOutput >= 0) {",
      "      sizeKb = mapRecord.bytesInOutput / 1024;",
      "      sizeKb = this.constructor.Math.ceil(sizeKb * 10) / 10;",
      "      mapRecord.bytesInOutputKb = sizeKb;",
      "    }",
      "    return mapRecord;",
      "  }",
      "",
      "  valueOf() {",
      "    return JSON.stringify(this);",
      "  }",
      "  toString() {",
      "    return JSON.stringify(this);",
      "  }",
      "}",
      ""
    ],
    "description": "esbuild.plugin.metafile"
  }
}